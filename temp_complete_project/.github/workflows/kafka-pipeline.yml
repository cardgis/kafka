# ⚙️ Configuration CI/CD pour le Pipeline Kafka Weather Analytics

name: 'Kafka Weather Analytics CI/CD'

on:
  push:
    branches: [ master, develop, 'exercice*' ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ master, develop ]
  schedule:
    # Tests nightly à 2h00 UTC
    - cron: '0 2 * * *'

env:
  PYTHON_VERSION: '3.9'
  KAFKA_VERSION: '2.13-3.9.1'
  SPARK_VERSION: '3.4.0'

jobs:
  # ==================== VALIDATION CODE ====================
  code-quality:
    name: '🔍 Code Quality & Linting'
    runs-on: ubuntu-latest
    
    steps:
    - name: 'Checkout Code'
      uses: actions/checkout@v4
      
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 'Cache Dependencies'
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        
    - name: 'Install Dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort mypy pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: 'Code Formatting (Black)'
      run: |
        black --check --diff exercices/
        
    - name: 'Import Sorting (isort)'
      run: |
        isort --check-only --diff exercices/
        
    - name: 'Linting (flake8)'
      run: |
        flake8 exercices/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 exercices/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: 'Static Type Checking (mypy)'
      run: |
        mypy exercices/ --ignore-missing-imports --no-strict-optional
        
    - name: 'Security Check (bandit)'
      run: |
        pip install bandit
        bandit -r exercices/ -f json -o bandit-report.json || true
        
    - name: 'Upload Security Report'
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # ==================== TESTS UNITAIRES ====================
  unit-tests:
    name: '🧪 Unit Tests'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Setup Python ${{ matrix.python-version }}'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: 'Install Dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
        
    - name: 'Run Unit Tests'
      run: |
        pytest tests/ -v --cov=exercices --cov-report=xml --cov-report=html
      shell: bash
      
    - name: 'Upload Coverage to Codecov'
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.9'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # ==================== TESTS INTÉGRATION ====================
  integration-tests:
    name: '🔗 Integration Tests'
    runs-on: ubuntu-latest
    needs: [code-quality, unit-tests]
    
    services:
      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
          
      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 'Install Dependencies'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: 'Wait for Kafka'
      run: |
        timeout 60 bash -c 'until nc -z localhost 9092; do sleep 1; done'
        
    - name: 'Test Kafka Connectivity'
      run: |
        python -c "
        from kafka import KafkaProducer, KafkaConsumer
        producer = KafkaProducer(bootstrap_servers=['localhost:9092'])
        producer.send('test-topic', b'test-message')
        producer.flush()
        print('✅ Kafka connectivity OK')
        "
        
    - name: 'Run Integration Tests'
      run: |
        pytest tests/integration/ -v --timeout=300
        
    - name: 'Test Weather API Integration'
      env:
        OPEN_METEO_API_TIMEOUT: 30
      run: |
        python exercices/exercice6/geo_weather.py Paris France --test
        
    - name: 'Test HDFS Consumer'
      run: |
        mkdir -p test-hdfs
        python exercices/exercice7/hdfs_consumer.py --hdfs-path test-hdfs --test
        
    - name: 'Test Visualizations'
      run: |
        python exercices/exercice8/weather_visualizer.py --input test-hdfs --test

  # ==================== TESTS PERFORMANCE ====================
  performance-tests:
    name: '⚡ Performance Tests'
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Setup Environment'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 'Install Dependencies'
      run: |
        pip install -r requirements.txt
        pip install locust memory-profiler
        
    - name: 'Performance Benchmark'
      run: |
        python -m pytest tests/performance/ -v --benchmark-only
        
    - name: 'Memory Profile'
      run: |
        mprof run python exercices/exercice6/geo_weather.py --batch 1000
        mprof plot --output memory-profile.png
        
    - name: 'Upload Performance Results'
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: |
          memory-profile.png
          .benchmarks/

  # ==================== SÉCURITÉ ====================
  security-scan:
    name: '🔒 Security Scan'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Dependency Check'
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
        
    - name: 'Container Security Scan'
      if: github.event_name == 'push'
      run: |
        docker build -f docker/Dockerfile.producer -t kafka-weather-producer .
        docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
          -v $(pwd):/src aquasec/trivy image kafka-weather-producer

  # ==================== BUILD & PACKAGE ====================
  build:
    name: '🏗️ Build & Package'
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Setup Python'
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: 'Build Python Package'
      run: |
        pip install build wheel setuptools
        python -m build
        
    - name: 'Build Docker Images'
      run: |
        docker build -f docker/Dockerfile.producer -t kafka-weather-producer:${{ github.sha }} .
        docker build -f docker/Dockerfile.consumer -t kafka-weather-consumer:${{ github.sha }} .
        docker build -f docker/Dockerfile.visualizer -t kafka-weather-visualizer:${{ github.sha }} .
        
    - name: 'Test Docker Images'
      run: |
        docker run --rm kafka-weather-producer:${{ github.sha }} --help
        docker run --rm kafka-weather-consumer:${{ github.sha }} --help
        docker run --rm kafka-weather-visualizer:${{ github.sha }} --help
        
    - name: 'Save Docker Images'
      run: |
        docker save kafka-weather-producer:${{ github.sha }} | gzip > producer-image.tar.gz
        docker save kafka-weather-consumer:${{ github.sha }} | gzip > consumer-image.tar.gz
        docker save kafka-weather-visualizer:${{ github.sha }} | gzip > visualizer-image.tar.gz
        
    - name: 'Upload Artifacts'
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          *.tar.gz

  # ==================== DÉPLOIEMENT ====================
  deploy-staging:
    name: '🚀 Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [build, security-scan, performance-tests]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Download Artifacts'
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: 'Deploy to Staging'
      run: |
        echo "🚧 Déploiement staging en cours..."
        # Ici: scripts de déploiement vers environnement staging
        # kubectl apply -f k8s/staging/
        # helm upgrade --install kafka-weather ./helm-chart
        
    - name: 'Run Smoke Tests'
      run: |
        echo "🔍 Tests de smoke en cours..."
        # Tests post-déploiement
        
    - name: 'Notify Deployment'
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}

  deploy-production:
    name: '🌟 Deploy to Production'
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/v')
    environment: production
    
    steps:
    - uses: actions/checkout@v4
      
    - name: 'Download Artifacts'
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
        
    - name: 'Deploy to Production'
      run: |
        echo "🌟 Déploiement production en cours..."
        # Déploiement production avec blue-green strategy
        
    - name: 'Health Check'
      run: |
        echo "❤️ Vérification santé post-déploiement..."
        
    - name: 'Create Release'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

  # ==================== NETTOYAGE ====================
  cleanup:
    name: '🧹 Cleanup'
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 'Cleanup Artifacts'
      run: |
        echo "🧹 Nettoyage des artefacts temporaires..."
        # Nettoyage des ressources temporaires
        
    - name: 'Cleanup Old Deployments'
      run: |
        echo "🗑️ Nettoyage des anciens déploiements..."
        # Nettoyage des déploiements obsolètes