#!/usr/bin/env python3
"""
Exercice 8: Visualisations des logs HDFS
=========================================

Dashboard de visualisation des donn√©es m√©t√©o stock√©es dans HDFS.
Analyse des temp√©ratures, vents, alertes par niveau et codes m√©t√©o par pays.

Fonctionnalit√©s:
- Analyse des donn√©es HDFS par pays/ville
- Graphiques temp√©rature et vent
- Distribution des alertes par niveau
- Codes m√©t√©o par pays
- Dashboard interactif

Author: Assistant
Date: 2024
"""

import json
import os
import argparse
from pathlib import Path
from typing import Dict, List, Optional, Tuple
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import numpy as np
from collections import defaultdict, Counter

# Configuration matplotlib pour de beaux graphiques
plt.style.use('seaborn-v0_8')
sns.set_palette("husl")


class HDFSWeatherAnalyzer:
    """Analyseur et visualiseur de donn√©es m√©t√©o HDFS"""
    
    def __init__(self, hdfs_path: str = "./hdfs-data"):
        """
        Initialise l'analyseur HDFS
        
        Args:
            hdfs_path: Chemin vers la structure HDFS
        """
        self.hdfs_path = Path(hdfs_path)
        self.data = []
        self.countries_data = defaultdict(list)
        self.cities_data = defaultdict(list)
        
        print("üìä EXERCICE 8 - VISUALISATIONS DONN√âES M√âT√âO HDFS")
        print("=" * 60)
        
        if not self.hdfs_path.exists():
            raise FileNotFoundError(f"‚ùå R√©pertoire HDFS non trouv√©: {hdfs_path}")
            
        print(f"üìÅ R√©pertoire HDFS: {self.hdfs_path.absolute()}")
        
    def load_hdfs_data(self):
        """Charge toutes les donn√©es depuis la structure HDFS"""
        print("\nüîÑ Chargement des donn√©es HDFS...")
        
        total_files = 0
        total_records = 0
        
        for country_dir in self.hdfs_path.iterdir():
            if not country_dir.is_dir():
                continue
                
            country_code = country_dir.name
            print(f"üåç Traitement pays: {country_code}")
            
            for city_dir in country_dir.iterdir():
                if not city_dir.is_dir():
                    continue
                    
                city_name = city_dir.name
                alerts_file = city_dir / "alerts.json"
                
                if not alerts_file.exists():
                    continue
                    
                try:
                    with open(alerts_file, 'r', encoding='utf-8') as f:
                        for line_num, line in enumerate(f, 1):
                            try:
                                record = json.loads(line.strip())
                                
                                # Enrichir avec m√©tadonn√©es g√©ographiques
                                record['country_code'] = country_code
                                record['city_name'] = city_name
                                record['file_path'] = str(alerts_file)
                                
                                self.data.append(record)
                                self.countries_data[country_code].append(record)
                                self.cities_data[f"{country_code}_{city_name}"].append(record)
                                
                                total_records += 1
                                
                            except json.JSONDecodeError as e:
                                print(f"‚ö†Ô∏è  Erreur JSON ligne {line_num} dans {alerts_file}: {e}")
                                
                    total_files += 1
                    print(f"   üèôÔ∏è  {city_name}: {sum(1 for _ in open(alerts_file))} entr√©es")
                    
                except Exception as e:
                    print(f"‚ùå Erreur lecture {alerts_file}: {e}")
                    
        print(f"\n‚úÖ Chargement termin√©:")
        print(f"   üìÑ Fichiers trait√©s: {total_files}")
        print(f"   üìä Enregistrements: {total_records}")
        print(f"   üåç Pays: {len(self.countries_data)}")
        print(f"   üèôÔ∏è  Villes: {len(self.cities_data)}")
        
        return total_records > 0
        
    def create_dataframe(self) -> pd.DataFrame:
        """Convertit les donn√©es en DataFrame pandas pour l'analyse"""
        if not self.data:
            raise ValueError("‚ùå Aucune donn√©e charg√©e. Appelez load_hdfs_data() d'abord.")
            
        records = []
        
        for item in self.data:
            try:
                # Extraire les donn√©es m√©t√©o
                weather = item.get('weather', {})
                location = item.get('location', {})
                metadata = item.get('metadata', {})
                hdfs_meta = item.get('hdfs_metadata', {})
                
                record = {
                    'country_code': item.get('country_code', 'UNKNOWN'),
                    'city_name': item.get('city_name', 'UNKNOWN'),
                    'country': location.get('country', 'Unknown'),
                    'city': location.get('city', 'Unknown'),
                    'latitude': location.get('latitude', 0.0),
                    'longitude': location.get('longitude', 0.0),
                    'temperature': weather.get('temperature', 0.0),
                    'windspeed': weather.get('windspeed', 0.0),
                    'winddirection': weather.get('winddirection', 0),
                    'weathercode': weather.get('weathercode', 0),
                    'is_day': weather.get('is_day', 1),
                    'timestamp': metadata.get('timestamp', ''),
                    'processed_at': hdfs_meta.get('processed_at', ''),
                    'source': metadata.get('source', 'unknown')
                }
                
                # Calculer niveau d'alerte (comme dans exercice 4)
                alert_level = self._calculate_alert_level(
                    record['temperature'], 
                    record['windspeed']
                )
                record['alert_level'] = alert_level
                
                records.append(record)
                
            except Exception as e:
                print(f"‚ö†Ô∏è  Erreur traitement enregistrement: {e}")
                continue
                
        df = pd.DataFrame(records)
        
        # Convertir les timestamps
        for col in ['timestamp', 'processed_at']:
            if col in df.columns:
                df[col] = pd.to_datetime(df[col], errors='coerce')
                
        print(f"üìä DataFrame cr√©√©: {len(df)} lignes, {len(df.columns)} colonnes")
        return df
        
    def _calculate_alert_level(self, temperature: float, windspeed: float) -> str:
        """Calcule le niveau d'alerte bas√© sur temp√©rature et vent"""
        # Logique identique √† l'exercice 4
        temp_alert = 0
        wind_alert = 0
        
        # Alerte temp√©rature
        if temperature >= 35:
            temp_alert = 3  # Critique
        elif temperature >= 30:
            temp_alert = 2  # √âlev√©e
        elif temperature >= 25:
            temp_alert = 1  # Mod√©r√©e
        elif temperature <= -10:
            temp_alert = 3  # Critique (froid)
        elif temperature <= 0:
            temp_alert = 2  # √âlev√©e (froid)
        elif temperature <= 5:
            temp_alert = 1  # Mod√©r√©e (froid)
            
        # Alerte vent
        if windspeed >= 100:
            wind_alert = 3  # Critique
        elif windspeed >= 70:
            wind_alert = 2  # √âlev√©e
        elif windspeed >= 40:
            wind_alert = 1  # Mod√©r√©e
            
        # Niveau final (maximum des deux)
        max_alert = max(temp_alert, wind_alert)
        
        if max_alert == 3:
            return "CRITIQUE"
        elif max_alert == 2:
            return "√âLEV√âE"
        elif max_alert == 1:
            return "MOD√âR√âE"
        else:
            return "NORMALE"
            
    def generate_visualizations(self, output_dir: str = "./visualizations"):
        """G√©n√®re toutes les visualisations"""
        output_path = Path(output_dir)
        output_path.mkdir(exist_ok=True)
        
        if not self.data:
            print("‚ùå Aucune donn√©e √† visualiser")
            return
            
        df = self.create_dataframe()
        
        print(f"\nüé® G√©n√©ration des visualisations dans {output_path}...")
        
        # 1. Analyse temp√©rature par pays
        self._plot_temperature_by_country(df, output_path)
        
        # 2. Analyse vent par pays
        self._plot_wind_by_country(df, output_path)
        
        # 3. Distribution des alertes
        self._plot_alert_distribution(df, output_path)
        
        # 4. Codes m√©t√©o par pays
        self._plot_weather_codes(df, output_path)
        
        # 5. Vue d'ensemble g√©ographique
        self._plot_geographic_overview(df, output_path)
        
        # 6. Analyse temporelle
        self._plot_temporal_analysis(df, output_path)
        
        # 7. Dashboard r√©capitulatif
        self._create_dashboard(df, output_path)
        
        print(f"‚úÖ Visualisations g√©n√©r√©es dans {output_path}")
        
    def _plot_temperature_by_country(self, df: pd.DataFrame, output_path: Path):
        """Graphique temp√©rature par pays"""
        plt.figure(figsize=(12, 8))
        
        # Box plot des temp√©ratures par pays
        countries = df['country_code'].value_counts().head(10).index
        df_filtered = df[df['country_code'].isin(countries)]
        
        sns.boxplot(data=df_filtered, x='country_code', y='temperature')
        plt.title('üå°Ô∏è Distribution des Temp√©ratures par Pays', fontsize=16, fontweight='bold')
        plt.xlabel('Code Pays', fontsize=12)
        plt.ylabel('Temp√©rature (¬∞C)', fontsize=12)
        plt.xticks(rotation=45)
        
        # Ajouter ligne temp√©rature moyenne globale
        mean_temp = df['temperature'].mean()
        plt.axhline(y=mean_temp, color='red', linestyle='--', alpha=0.7, 
                   label=f'Moyenne globale: {mean_temp:.1f}¬∞C')
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(output_path / "temperature_by_country.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ temperature_by_country.png")
        
    def _plot_wind_by_country(self, df: pd.DataFrame, output_path: Path):
        """Graphique vent par pays"""
        plt.figure(figsize=(12, 8))
        
        # Graphique barres vitesse moyenne du vent par pays
        wind_by_country = df.groupby('country_code')['windspeed'].agg(['mean', 'max']).reset_index()
        wind_by_country = wind_by_country.sort_values('mean', ascending=False).head(10)
        
        x = range(len(wind_by_country))
        width = 0.35
        
        plt.bar([i - width/2 for i in x], wind_by_country['mean'], width, 
               label='Vitesse moyenne', alpha=0.8)
        plt.bar([i + width/2 for i in x], wind_by_country['max'], width, 
               label='Vitesse maximale', alpha=0.8)
        
        plt.title('üí® Vitesse du Vent par Pays', fontsize=16, fontweight='bold')
        plt.xlabel('Code Pays', fontsize=12)
        plt.ylabel('Vitesse du Vent (km/h)', fontsize=12)
        plt.xticks(x, wind_by_country['country_code'], rotation=45)
        plt.legend()
        
        plt.tight_layout()
        plt.savefig(output_path / "wind_by_country.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ wind_by_country.png")
        
    def _plot_alert_distribution(self, df: pd.DataFrame, output_path: Path):
        """Distribution des niveaux d'alerte"""
        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))
        
        # Graphique en camembert global
        alert_counts = df['alert_level'].value_counts()
        colors = ['green', 'yellow', 'orange', 'red'][:len(alert_counts)]
        
        ax1.pie(alert_counts.values, labels=alert_counts.index, autopct='%1.1f%%',
               colors=colors, startangle=90)
        ax1.set_title('üö® Distribution Globale des Alertes', fontsize=14, fontweight='bold')
        
        # Graphique barres par pays
        alert_by_country = pd.crosstab(df['country_code'], df['alert_level'])
        alert_by_country.plot(kind='bar', stacked=True, ax=ax2, 
                             color=colors[:len(alert_by_country.columns)])
        ax2.set_title('üö® Alertes par Pays', fontsize=14, fontweight='bold')
        ax2.set_xlabel('Code Pays')
        ax2.set_ylabel('Nombre d\'Alertes')
        ax2.tick_params(axis='x', rotation=45)
        ax2.legend(title='Niveau d\'Alerte')
        
        plt.tight_layout()
        plt.savefig(output_path / "alert_distribution.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ alert_distribution.png")
        
    def _plot_weather_codes(self, df: pd.DataFrame, output_path: Path):
        """Codes m√©t√©o par pays"""
        plt.figure(figsize=(14, 8))
        
        # Mapping des codes m√©t√©o WMO
        weather_code_mapping = {
            0: "Ciel d√©gag√©",
            1: "Principalement d√©gag√©", 
            2: "Partiellement nuageux",
            3: "Couvert",
            45: "Brouillard",
            48: "Brouillard givrant",
            51: "Bruine l√©g√®re",
            53: "Bruine mod√©r√©e",
            55: "Bruine forte",
            61: "Pluie l√©g√®re",
            63: "Pluie mod√©r√©e",
            65: "Pluie forte",
            71: "Neige l√©g√®re",
            73: "Neige mod√©r√©e",
            75: "Neige forte",
            95: "Orage"
        }
        
        # Cr√©er heatmap des codes m√©t√©o par pays
        weather_by_country = pd.crosstab(df['country_code'], df['weathercode'])
        
        # Renommer les colonnes avec les descriptions
        weather_by_country.columns = [
            weather_code_mapping.get(code, f"Code {code}") 
            for code in weather_by_country.columns
        ]
        
        sns.heatmap(weather_by_country, annot=True, fmt='d', cmap='YlOrRd', 
                   cbar_kws={'label': 'Nombre d\'observations'})
        
        plt.title('üå§Ô∏è Codes M√©t√©o par Pays', fontsize=16, fontweight='bold')
        plt.xlabel('Code M√©t√©o', fontsize=12)
        plt.ylabel('Code Pays', fontsize=12)
        plt.xticks(rotation=45, ha='right')
        
        plt.tight_layout()
        plt.savefig(output_path / "weather_codes_by_country.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ weather_codes_by_country.png")
        
    def _plot_geographic_overview(self, df: pd.DataFrame, output_path: Path):
        """Vue d'ensemble g√©ographique"""
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        # 1. Scatter plot latitude/longitude avec temp√©rature
        scatter = ax1.scatter(df['longitude'], df['latitude'], 
                            c=df['temperature'], s=df['windspeed']*2, 
                            cmap='coolwarm', alpha=0.7)
        ax1.set_title('üó∫Ô∏è Localisation avec Temp√©rature/Vent', fontweight='bold')
        ax1.set_xlabel('Longitude')
        ax1.set_ylabel('Latitude')
        plt.colorbar(scatter, ax=ax1, label='Temp√©rature (¬∞C)')
        
        # 2. Nombre de villes par pays
        cities_by_country = df.groupby('country_code')['city_name'].nunique().sort_values(ascending=False)
        cities_by_country.head(10).plot(kind='bar', ax=ax2, color='skyblue')
        ax2.set_title('üèôÔ∏è Nombre de Villes par Pays', fontweight='bold')
        ax2.set_ylabel('Nombre de Villes')
        ax2.tick_params(axis='x', rotation=45)
        
        # 3. Temp√©rature moyenne par pays
        temp_by_country = df.groupby('country_code')['temperature'].mean().sort_values(ascending=False)
        temp_by_country.head(10).plot(kind='bar', ax=ax3, color='coral')
        ax3.set_title('üå°Ô∏è Temp√©rature Moyenne par Pays', fontweight='bold')
        ax3.set_ylabel('Temp√©rature (¬∞C)')
        ax3.tick_params(axis='x', rotation=45)
        
        # 4. Distribution des directions du vent
        wind_directions = df['winddirection'].value_counts().head(8)
        wind_directions.plot(kind='bar', ax=ax4, color='lightgreen')
        ax4.set_title('üß≠ Distribution des Directions du Vent', fontweight='bold')
        ax4.set_ylabel('Nombre d\'observations')
        ax4.set_xlabel('Direction (degr√©s)')
        ax4.tick_params(axis='x', rotation=45)
        
        plt.tight_layout()
        plt.savefig(output_path / "geographic_overview.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ geographic_overview.png")
        
    def _plot_temporal_analysis(self, df: pd.DataFrame, output_path: Path):
        """Analyse temporelle des donn√©es"""
        if df['processed_at'].isna().all():
            print("   ‚ö†Ô∏è Pas de donn√©es temporelles pour l'analyse")
            return
            
        plt.figure(figsize=(14, 8))
        
        # Filtrer les donn√©es avec timestamps valides
        df_time = df.dropna(subset=['processed_at'])
        
        if len(df_time) == 0:
            print("   ‚ö†Ô∏è Aucune donn√©e temporelle valide")
            return
            
        # Temp√©rature au fil du temps
        df_time = df_time.sort_values('processed_at')
        
        plt.subplot(2, 1, 1)
        for country in df_time['country_code'].unique()[:5]:  # Top 5 pays
            country_data = df_time[df_time['country_code'] == country]
            plt.plot(country_data['processed_at'], country_data['temperature'], 
                    marker='o', label=country, alpha=0.7)
                    
        plt.title('üìà √âvolution Temporelle des Temp√©ratures', fontsize=14, fontweight='bold')
        plt.ylabel('Temp√©rature (¬∞C)')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        # Vitesse du vent au fil du temps
        plt.subplot(2, 1, 2)
        for country in df_time['country_code'].unique()[:5]:
            country_data = df_time[df_time['country_code'] == country]
            plt.plot(country_data['processed_at'], country_data['windspeed'], 
                    marker='s', label=country, alpha=0.7)
                    
        plt.title('üí® √âvolution Temporelle du Vent', fontsize=14, fontweight='bold')
        plt.ylabel('Vitesse du Vent (km/h)')
        plt.xlabel('Temps de Traitement')
        plt.legend()
        plt.grid(True, alpha=0.3)
        
        plt.tight_layout()
        plt.savefig(output_path / "temporal_analysis.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ temporal_analysis.png")
        
    def _create_dashboard(self, df: pd.DataFrame, output_path: Path):
        """Dashboard r√©capitulatif avec statistiques cl√©s"""
        fig = plt.figure(figsize=(20, 12))
        
        # Cr√©er une grille de sous-graphiques
        gs = fig.add_gridspec(3, 4, hspace=0.3, wspace=0.3)
        
        # Statistiques g√©n√©rales (texte)
        ax_stats = fig.add_subplot(gs[0, :2])
        ax_stats.axis('off')
        
        stats_text = f"""
üìä STATISTIQUES G√âN√âRALES HDFS
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
üìÑ Total enregistrements: {len(df):,}
üåç Pays analys√©s: {df['country_code'].nunique()}
üèôÔ∏è Villes analys√©es: {df['city_name'].nunique()}

üå°Ô∏è TEMP√âRATURE
‚Ä¢ Moyenne: {df['temperature'].mean():.1f}¬∞C
‚Ä¢ Min: {df['temperature'].min():.1f}¬∞C  
‚Ä¢ Max: {df['temperature'].max():.1f}¬∞C

üí® VENT  
‚Ä¢ Vitesse moyenne: {df['windspeed'].mean():.1f} km/h
‚Ä¢ Vitesse max: {df['windspeed'].max():.1f} km/h

üö® ALERTES
‚Ä¢ Critiques: {len(df[df['alert_level'] == 'CRITIQUE'])}
‚Ä¢ √âlev√©es: {len(df[df['alert_level'] == '√âLEV√âE'])}
‚Ä¢ Mod√©r√©es: {len(df[df['alert_level'] == 'MOD√âR√âE'])}
‚Ä¢ Normales: {len(df[df['alert_level'] == 'NORMALE'])}
        """
        
        ax_stats.text(0.05, 0.95, stats_text, transform=ax_stats.transAxes, 
                     fontsize=12, verticalalignment='top', fontfamily='monospace',
                     bbox=dict(boxstyle="round,pad=1", facecolor="lightblue", alpha=0.7))
        
        # Top 5 pays par temp√©rature
        ax1 = fig.add_subplot(gs[0, 2])
        top_temp = df.groupby('country_code')['temperature'].mean().sort_values(ascending=False).head(5)
        top_temp.plot(kind='bar', ax=ax1, color='red', alpha=0.7)
        ax1.set_title('üå°Ô∏è Top 5 Pays - Temp√©rature', fontweight='bold')
        ax1.tick_params(axis='x', rotation=45)
        
        # Top 5 pays par vent
        ax2 = fig.add_subplot(gs[0, 3])
        top_wind = df.groupby('country_code')['windspeed'].mean().sort_values(ascending=False).head(5)
        top_wind.plot(kind='bar', ax=ax2, color='blue', alpha=0.7)
        ax2.set_title('üí® Top 5 Pays - Vent', fontweight='bold')
        ax2.tick_params(axis='x', rotation=45)
        
        # Distribution alertes (pie)
        ax3 = fig.add_subplot(gs[1, 0])
        alert_counts = df['alert_level'].value_counts()
        colors = ['green', 'yellow', 'orange', 'red'][:len(alert_counts)]
        ax3.pie(alert_counts.values, labels=alert_counts.index, autopct='%1.1f%%',
               colors=colors, startangle=90)
        ax3.set_title('üö® Distribution Alertes', fontweight='bold')
        
        # Codes m√©t√©o les plus fr√©quents
        ax4 = fig.add_subplot(gs[1, 1])
        top_weather = df['weathercode'].value_counts().head(5)
        top_weather.plot(kind='bar', ax=ax4, color='orange', alpha=0.7)
        ax4.set_title('üå§Ô∏è Top 5 Codes M√©t√©o', fontweight='bold')
        ax4.tick_params(axis='x', rotation=45)
        
        # Heatmap temp√©rature vs vent par pays
        ax5 = fig.add_subplot(gs[1, 2:])
        temp_wind_by_country = df.groupby('country_code')[['temperature', 'windspeed']].mean()
        sns.scatterplot(data=temp_wind_by_country, x='temperature', y='windspeed', 
                       s=100, alpha=0.7, ax=ax5)
        
        # Annoter les points avec les codes pays
        for idx, row in temp_wind_by_country.iterrows():
            ax5.annotate(idx, (row['temperature'], row['windspeed']), 
                        xytext=(5, 5), textcoords='offset points', fontsize=8)
                        
        ax5.set_title('üå°Ô∏èüí® Temp√©rature vs Vent par Pays', fontweight='bold')
        ax5.set_xlabel('Temp√©rature Moyenne (¬∞C)')
        ax5.set_ylabel('Vitesse Vent Moyenne (km/h)')
        
        # Historique par pays (ligne du temps simplifi√©e)
        ax6 = fig.add_subplot(gs[2, :])
        
        # Simulation d'une timeline avec index
        df_sample = df.head(50)  # √âchantillon pour la lisibilit√©
        
        for i, country in enumerate(df_sample['country_code'].unique()[:5]):
            country_data = df_sample[df_sample['country_code'] == country]
            indices = country_data.index
            temperatures = country_data['temperature']
            
            ax6.plot(indices, temperatures, marker='o', label=country, alpha=0.7)
            
        ax6.set_title('üìà √âchantillon √âvolution Temp√©ratures par Index', fontweight='bold')
        ax6.set_xlabel('Index d\'enregistrement')
        ax6.set_ylabel('Temp√©rature (¬∞C)')
        ax6.legend()
        ax6.grid(True, alpha=0.3)
        
        plt.suptitle('üåç DASHBOARD M√âT√âO HDFS - VUE D\'ENSEMBLE COMPL√àTE', 
                    fontsize=20, fontweight='bold', y=0.98)
        
        plt.savefig(output_path / "dashboard_overview.png", dpi=300, bbox_inches='tight')
        plt.close()
        
        print("   ‚úÖ dashboard_overview.png")
        
    def generate_report(self, output_dir: str = "./visualizations"):
        """G√©n√®re un rapport HTML avec toutes les visualisations"""
        output_path = Path(output_dir)
        
        if not self.data:
            print("‚ùå Aucune donn√©e pour le rapport")
            return
            
        df = self.create_dataframe()
        
        # Template HTML
        html_content = f"""
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>üåç Rapport Analyse M√©t√©o HDFS</title>
    <style>
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            line-height: 1.6;
            margin: 0;
            padding: 20px;
            background-color: #f5f5f5;
        }}
        .container {{
            max-width: 1200px;
            margin: 0 auto;
            background: white;
            padding: 30px;
            border-radius: 10px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }}
        h1, h2 {{
            color: #2c3e50;
            border-bottom: 3px solid #3498db;
            padding-bottom: 10px;
        }}
        .stats-grid {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin: 20px 0;
        }}
        .stat-card {{
            background: #ecf0f1;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            border-left: 5px solid #3498db;
        }}
        .stat-number {{
            font-size: 2em;
            font-weight: bold;
            color: #2980b9;
        }}
        .chart {{
            text-align: center;
            margin: 30px 0;
        }}
        .chart img {{
            max-width: 100%;
            height: auto;
            border-radius: 8px;
            box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        }}
        .footer {{
            text-align: center;
            margin-top: 50px;
            padding: 20px;
            background: #34495e;
            color: white;
            border-radius: 8px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <h1>üåç Rapport d'Analyse M√©t√©o HDFS</h1>
        <p><strong>G√©n√©r√© le:</strong> {datetime.now().strftime('%d/%m/%Y √† %H:%M:%S')}</p>
        
        <h2>üìä Statistiques G√©n√©rales</h2>
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number">{len(df):,}</div>
                <div>Enregistrements Totaux</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{df['country_code'].nunique()}</div>
                <div>Pays Analys√©s</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{df['city_name'].nunique()}</div>
                <div>Villes Analys√©es</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{df['temperature'].mean():.1f}¬∞C</div>
                <div>Temp√©rature Moyenne</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{df['windspeed'].mean():.1f}</div>
                <div>Vent Moyen (km/h)</div>
            </div>
            <div class="stat-card">
                <div class="stat-number">{len(df[df['alert_level'] != 'NORMALE'])}</div>
                <div>Alertes M√©t√©o</div>
            </div>
        </div>
        
        <h2>üìà Dashboard Complet</h2>
        <div class="chart">
            <img src="dashboard_overview.png" alt="Dashboard Complet">
        </div>
        
        <h2>üå°Ô∏è Analyse des Temp√©ratures</h2>
        <div class="chart">
            <img src="temperature_by_country.png" alt="Temp√©ratures par Pays">
        </div>
        
        <h2>üí® Analyse du Vent</h2>
        <div class="chart">
            <img src="wind_by_country.png" alt="Vent par Pays">
        </div>
        
        <h2>üö® Distribution des Alertes</h2>
        <div class="chart">
            <img src="alert_distribution.png" alt="Distribution des Alertes">
        </div>
        
        <h2>üå§Ô∏è Codes M√©t√©o par Pays</h2>
        <div class="chart">
            <img src="weather_codes_by_country.png" alt="Codes M√©t√©o">
        </div>
        
        <h2>üó∫Ô∏è Vue G√©ographique</h2>
        <div class="chart">
            <img src="geographic_overview.png" alt="Vue G√©ographique">
        </div>
        
        <h2>üìà Analyse Temporelle</h2>
        <div class="chart">
            <img src="temporal_analysis.png" alt="Analyse Temporelle">
        </div>
        
        <div class="footer">
            <p>üåç Rapport g√©n√©r√© par l'Exercice 8 - Visualisations HDFS</p>
            <p>Donn√©es source: Structure HDFS {self.hdfs_path}</p>
        </div>
    </div>
</body>
</html>
        """
        
        report_path = output_path / "rapport_meteo_hdfs.html"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
            
        print(f"‚úÖ Rapport HTML g√©n√©r√©: {report_path}")
        return report_path


def main():
    """Point d'entr√©e principal"""
    parser = argparse.ArgumentParser(
        description="Visualisations des donn√©es m√©t√©o HDFS"
    )
    
    parser.add_argument('--hdfs-path', 
                        default='./hdfs-data',
                        help='Chemin vers la structure HDFS (d√©faut: ./hdfs-data)')
    
    parser.add_argument('--output-dir', 
                        default='./visualizations',
                        help='R√©pertoire de sortie pour les visualisations (d√©faut: ./visualizations)')
    
    parser.add_argument('--report', 
                        action='store_true',
                        help='G√©n√©rer aussi un rapport HTML')
    
    args = parser.parse_args()
    
    try:
        # Cr√©er l'analyseur
        analyzer = HDFSWeatherAnalyzer(args.hdfs_path)
        
        # Charger les donn√©es
        if not analyzer.load_hdfs_data():
            print("‚ùå Aucune donn√©e trouv√©e dans la structure HDFS")
            return
            
        # G√©n√©rer les visualisations
        analyzer.generate_visualizations(args.output_dir)
        
        # G√©n√©rer le rapport HTML si demand√©
        if args.report:
            analyzer.generate_report(args.output_dir)
            
        print(f"\nüéâ Analyse termin√©e avec succ√®s!")
        print(f"üìÅ Visualisations disponibles dans: {args.output_dir}")
        
    except Exception as e:
        print(f"‚ùå Erreur durant l'analyse: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()