# Setup Environment - Kafka Weather Analytics Pipeline
# Configuration automatique de l'environnement de developpement

param(
    [Parameter(Mandatory=$false)]
    [switch]$SkipPythonSetup = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$SkipKafkaSetup = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$InstallDev = $false,
    
    [Parameter(Mandatory=$false)]
    [switch]$QuickSetup = $false
)

Write-Host "=== CONFIGURATION ENVIRONNEMENT KAFKA WEATHER ANALYTICS ===" -ForegroundColor Cyan
Write-Host "Version: 1.0.0" -ForegroundColor Green

# Configuration
$ProjectRoot = $PSScriptRoot
Set-Location $ProjectRoot

# Fonctions utilitaires
function Write-Step {
    param([string]$Message, [string]$Color = "Yellow")
    Write-Host "`n$Message" -ForegroundColor $Color
}

function Write-Success {
    param([string]$Message)
    Write-Host "   ‚úÖ $Message" -ForegroundColor Green
}

function Write-Warning {
    param([string]$Message)
    Write-Host "   ‚ö†Ô∏è  $Message" -ForegroundColor Yellow
}

function Write-Error {
    param([string]$Message)
    Write-Host "   ‚ùå $Message" -ForegroundColor Red
}

# Verification des prerequis
function Test-Prerequisites {
    Write-Step "üîç VERIFICATION DES PREREQUIS"
    
    # Verifier Python
    try {
        $pythonVersion = python --version 2>$null
        if ($pythonVersion -match "Python 3\.([8-9]|1[0-9])") {
            Write-Success "Python install√©: $pythonVersion"
        } else {
            Write-Warning "Version Python non optimale: $pythonVersion"
            Write-Host "      Recommand√©: Python 3.8+" -ForegroundColor Gray
        }
    } catch {
        Write-Error "Python non install√© ou non accessible"
        Write-Host "      Installer Python 3.8+ depuis https://python.org" -ForegroundColor Gray
        return $false
    }
    
    # Verifier pip
    try {
        pip --version | Out-Null
        Write-Success "pip install√© et accessible"
    } catch {
        Write-Error "pip non accessible"
        return $false
    }
    
    # Verifier Git
    try {
        $gitVersion = git --version 2>$null
        Write-Success "Git install√©: $gitVersion"
    } catch {
        Write-Error "Git non install√©"
        return $false
    }
    
    # Verifier Java pour Kafka
    if (-not $SkipKafkaSetup) {
        try {
            $javaVersion = java -version 2>&1 | Select-String "version"
            Write-Success "Java install√© pour Kafka"
        } catch {
            Write-Warning "Java non d√©tect√© - n√©cessaire pour Kafka"
            Write-Host "      Installer OpenJDK 11+ ou Oracle JDK" -ForegroundColor Gray
        }
    }
    
    return $true
}

# Configuration Python
function Set-PythonEnvironment {
    if ($SkipPythonSetup) {
        Write-Step "‚è≠Ô∏è  Configuration Python ignor√©e"
        return
    }
    
    Write-Step "üêç CONFIGURATION ENVIRONNEMENT PYTHON"
    
    # Cr√©er environnement virtuel si n√©cessaire
    if (-not (Test-Path "venv")) {
        Write-Host "   üì¶ Cr√©ation environnement virtuel..." -ForegroundColor Blue
        python -m venv venv
        Write-Success "Environnement virtuel cr√©√©"
    } else {
        Write-Success "Environnement virtuel existant"
    }
    
    # Activer environnement virtuel
    Write-Host "   üîå Activation environnement virtuel..." -ForegroundColor Blue
    if (Test-Path "venv\Scripts\Activate.ps1") {
        & "venv\Scripts\Activate.ps1"
        Write-Success "Environnement virtuel activ√©"
    } else {
        Write-Warning "Script d'activation non trouv√©"
    }
    
    # Mettre √† jour pip
    Write-Host "   üìà Mise √† jour pip..." -ForegroundColor Blue
    python -m pip install --upgrade pip
    Write-Success "pip mis √† jour"
    
    # Installer d√©pendances principales
    Write-Host "   üì¶ Installation d√©pendances principales..." -ForegroundColor Blue
    pip install -r requirements.txt
    
    if ($LASTEXITCODE -eq 0) {
        Write-Success "D√©pendances principales install√©es"
    } else {
        Write-Warning "Probl√®mes lors de l'installation des d√©pendances"
    }
    
    # Installer d√©pendances de d√©veloppement
    if ($InstallDev) {
        Write-Host "   üõ†Ô∏è  Installation outils de d√©veloppement..." -ForegroundColor Blue
        pip install pytest black flake8 isort mypy pre-commit
        Write-Success "Outils de d√©veloppement install√©s"
    }
}

# Configuration Kafka
function Set-KafkaEnvironment {
    if ($SkipKafkaSetup) {
        Write-Step "‚è≠Ô∏è  Configuration Kafka ignor√©e"
        return
    }
    
    Write-Step "üì® CONFIGURATION APACHE KAFKA"
    
    # V√©rifier pr√©sence Kafka
    if (Test-Path "kafka_2.13-3.9.1") {
        Write-Success "Apache Kafka 2.13-3.9.1 d√©tect√©"
        
        # V√©rifier scripts PowerShell
        $scripts = @("start-kafka.ps1", "start-zookeeper.ps1", "stop-kafka.ps1", "test-kafka.ps1")
        foreach ($script in $scripts) {
            if (Test-Path $script) {
                Write-Success "Script disponible: $script"
            } else {
                Write-Warning "Script manquant: $script"
            }
        }
        
        # Test de connectivit√© Kafka (rapide)
        if (-not $QuickSetup) {
            Write-Host "   üîç Test rapide de connectivit√©..." -ForegroundColor Blue
            try {
                # Tenter de lister les topics existants
                $kafkaTest = & "kafka_2.13-3.9.1\bin\windows\kafka-topics.bat" --bootstrap-server localhost:9092 --list 2>$null
                if ($LASTEXITCODE -eq 0) {
                    Write-Success "Kafka accessible sur localhost:9092"
                } else {
                    Write-Warning "Kafka non d√©marr√© (normal au premier setup)"
                    Write-Host "      Utiliser: .\start-kafka.ps1" -ForegroundColor Gray
                }
            } catch {
                Write-Warning "Test Kafka √©chou√© (Kafka non d√©marr√©)"
            }
        }
    } else {
        Write-Error "Apache Kafka non trouv√© dans le r√©pertoire"
        Write-Host "      V√©rifier l'installation Kafka" -ForegroundColor Gray
    }
}

# Configuration des exercices
function Test-Exercices {
    Write-Step "üß™ VALIDATION DES EXERCICES"
    
    if (Test-Path "exercices") {
        $exercices = Get-ChildItem "exercices" -Directory
        Write-Success "$($exercices.Count) exercices d√©tect√©s"
        
        foreach ($exercice in $exercices) {
            $readmePath = Join-Path $exercice.FullName "README.md"
            $pythonFiles = Get-ChildItem $exercice.FullName -Filter "*.py" -ErrorAction SilentlyContinue
            
            if (Test-Path $readmePath) {
                Write-Success "$($exercice.Name): Documentation OK"
            } else {
                Write-Warning "$($exercice.Name): README.md manquant"
            }
            
            if ($pythonFiles.Count -gt 0) {
                Write-Success "$($exercice.Name): $($pythonFiles.Count) fichiers Python"
            } else {
                Write-Warning "$($exercice.Name): Aucun fichier Python"
            }
        }
    } else {
        Write-Error "R√©pertoire exercices non trouv√©"
    }
}

# Configuration de d√©veloppement
function Set-DevelopmentTools {
    Write-Step "üõ†Ô∏è  CONFIGURATION OUTILS DE DEVELOPPEMENT"
    
    # Configuration Git hooks si demand√©
    if ($InstallDev -and (Test-Path ".git")) {
        Write-Host "   ü™ù Configuration Git hooks..." -ForegroundColor Blue
        try {
            pre-commit install 2>$null
            Write-Success "Pre-commit hooks configur√©s"
        } catch {
            Write-Warning "Pre-commit non configur√© (optionnel)"
        }
    }
    
    # V√©rifier structure projet
    $requiredDirs = @("exercices", "kafka_2.13-3.9.1")
    $requiredFiles = @("README.md", "requirements.txt", "PROJECT_README.md")
    
    foreach ($dir in $requiredDirs) {
        if (Test-Path $dir) {
            Write-Success "R√©pertoire requis: $dir"
        } else {
            Write-Warning "R√©pertoire manquant: $dir"
        }
    }
    
    foreach ($file in $requiredFiles) {
        if (Test-Path $file) {
            Write-Success "Fichier essentiel: $file"
        } else {
            Write-Warning "Fichier manquant: $file"
        }
    }
}

# Instructions finales
function Show-FinalInstructions {
    Write-Step "üéØ INSTRUCTIONS FINALES" "Green"
    
    Write-Host "   üìã Environnement configur√© avec succ√®s!" -ForegroundColor Green
    Write-Host ""
    Write-Host "   üöÄ PROCHAINES ETAPES:" -ForegroundColor Cyan
    Write-Host "   1. D√©marrer Kafka: .\start-kafka.ps1" -ForegroundColor White
    Write-Host "   2. Tester connexion: .\test-kafka.ps1" -ForegroundColor White
    Write-Host "   3. Ex√©cuter exercice: cd exercices\exercice1" -ForegroundColor White
    Write-Host "   4. Lancer tests: pytest tests/" -ForegroundColor White
    Write-Host ""
    Write-Host "   üìö DOCUMENTATION:" -ForegroundColor Cyan
    Write-Host "   - README.md: Guide principal" -ForegroundColor White
    Write-Host "   - PROJECT_README.md: Documentation technique" -ForegroundColor White
    Write-Host "   - GUIDE_CONTINUITE.md: Suite du d√©veloppement" -ForegroundColor White
    Write-Host ""
    Write-Host "   üåê INTERFACES WEB (apr√®s d√©marrage Docker):" -ForegroundColor Cyan
    Write-Host "   - Kafka UI: http://localhost:8080" -ForegroundColor White
    Write-Host "   - Grafana: http://localhost:3000" -ForegroundColor White
    Write-Host "   - Dashboard: http://localhost:8501" -ForegroundColor White
}

# === EXECUTION PRINCIPALE ===

try {
    Write-Host "D√©marrage configuration environnement..." -ForegroundColor Blue
    
    # Mode setup rapide
    if ($QuickSetup) {
        Write-Step "‚ö° MODE SETUP RAPIDE ACTIVE" "Magenta"
    }
    
    # V√©rifications pr√©liminaires
    if (-not (Test-Prerequisites)) {
        Write-Error "Pr√©requis non satisfaits. Arr√™t du setup."
        exit 1
    }
    
    # Configuration Python
    Set-PythonEnvironment
    
    # Configuration Kafka
    Set-KafkaEnvironment
    
    # Validation exercices
    Test-Exercices
    
    # Outils de d√©veloppement
    Set-DevelopmentTools
    
    # Instructions finales
    Show-FinalInstructions
    
    Write-Host "`nüéâ CONFIGURATION TERMINEE AVEC SUCCES!" -ForegroundColor Green
    Write-Host "   L'environnement Kafka Weather Analytics est pr√™t!" -ForegroundColor Green

} catch {
    Write-Error "Erreur lors de la configuration: $($_.Exception.Message)"
    exit 1
}